version
v<-TRUE
print(class(v))
data=6L
print(class(data))
ls<-c('shrikant','mohan','raj')
print(class(ls))
l<-c(True,1,1+2i)
cls
version
data=7L
print(class(data))
print(class(1+2i))
vec1<-c("shrikant",6L,1+2i)
vec2<-c(2,3,4)
vec3<-c(3,4,5)
print(vec2+vec3)
print(vec2+vec3)
print(vec2-vec3)
print(vec1 & vec2)
print(vec2 & vec3)
print(vec2%vec3)
print(vec2%vec3)
temp1<-c(1,1+2i)
temp2<-c(2,3+4i)
print(temp1 && temp2)
print(temp1%temp2)
print(vec2*vec3)
print(temp1>=temp2)
print(vec2>=vec3)
print(vec2==vec3)
print(vec2<=vec3)
vs<-1:10
vs
print(!vec2)
print(vec2 || vec2)
print(vec2 && vec3)
seq(2,34,-2)
sequence(34,-1,-3)
print(vec2%vec3)
print(vec2^vec3)
print(vec2%%vec3)
c(1,"shrikant")->s1
s1
m=matrix(c(1,2,3,4),nrow=2,ncol=2)
print(m)
m2=matrix(1:12,nrows=2,ncol=2)
m2=matrix(1:12,nrow=2,ncol=2)
print(m1+m2)
print(m+m2)
print(m*m2)
m3=(1:13,nrow=3,ncol=3)
print(m-m2)
print(m2)
empname=c("shriknt","akshay","ritik","raj")
age=c(12,13,16,18)
cap=data.frame(empname,age)
View(cap)
dim(cap)
summary(cap)
cap$age
write.csv(cap,"C:/Users/shrikant padhy/Desktop/RESUMES/cap.csv")
number<-readline(promp="enter the number:")
for(i in 1:n){
if((n%%i)==0){
print(i)
}
}
for(i in 1:number){
if((n%%i)==0){
print(i)
}
}
if((number%%i)==0){
print(i)
}
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
number<-as.numeric(number)
12
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
1
2
number<-readline(promp="enter the number:")
number<-as.numeric(number)
12
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
12
12
12''
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
number<-as.numeric(number)
4
4
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
number<-readline(promp="enter the number:")
`8`
18
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
number<-as.numeric(number)
1
for(i in 1:number){
if((number %% i)==0){
print(i)
}
}
input.dat<- readingSkills[c(1:105),]
View(readingSkills)
png(file="C://Users//shrikant padhy//Desktop//ExperimentsR//experiment9.png")
output.tree<- ctree(nativeSpeaker~age+showSize+score,data=input.dat)
plot(output.tree)
dev.off()
install.packages("party")
require("party")
input.dat<- readingSkills[c(1:105),]
View(readingSkills)
png(file="C://Users//shrikant padhy//Desktop//ExperimentsR//experiment9.png")
output.tree<- ctree(nativeSpeaker~age+shoeSize+score,data=input.dat)
plot(output.tree)
dev.off()
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
library(ggplot2)
#to set the working directory
setwd("C:/Users/shrikant padhy/Desktop/ckddataset")
mydata1 <- read.csv("kidney_disease.csv")
mydata2 <- read.csv("ckd_clean.csv")
#mydata1 <- merge(mydata1,mydata2,by=c('age','bp','sg','al','su','rbc','pc','pcc','ba','bgr','bu','sc','sod','pot','hemo','pcv','wc','rc','htn','dm','cad','appet','pe','ane','classification'))
#summary stats for all variables in dataset
summary(mydata1)
temp<- mydata1
test<- mydata1$bp
test
#is.na() will check whether a particular valu is NA OR NOT returns vector of Boolean Value
is.na(test)
#to identify the indices having NA Values we can use which() function
which(is.na(test))
#replacing the NA values with mean value
test[which(is.na(test))]<- 76.47
test
#which(is.na(test))
#we are finding all the index in bp column which contains na values and replacing them with the mean
temp$bp[which(is.na(temp$bp))]<- mean(temp$bp,na.rm = TRUE) #na.rm will actually remove the NA if it encounters it while estimating mean
temp
temp$sg[which(is.na(temp$sg))]<- mean(temp$sg,na.rm = TRUE)
temp$al[which(is.na(temp$al))]<- mean(temp$al,na.rm = TRUE)
temp$bgr[which(is.na(temp$bgr))]<- mean(temp$bgr,na.rm = TRUE)
temp$bu[which(is.na(temp$bu))]<- mean(temp$bu,na.rm = TRUE)
temp$age[which(is.na(temp$age))]<- mean(temp$age,na.rm = TRUE)
temp$pe[which(is.na(temp$pe))]<- 1
#confusion matrix
table(temp$classification)
table(temp$classification)
mymodel=glm(classification~bgr+bu+ane+pe+dm+cad,family = binomial(link = "logit"),data=temp)
pymodel=predict(mymodel,temp)
#confusion matrix
tab=table(pmymodel>0.5,temp$classification)
tab
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
library(ggplot2)
#to set the working directory
setwd("C:/Users/shrikant padhy/Desktop/ckddataset")
mydata1 <- read.csv("kidney_disease.csv")
mydata2 <- read.csv("ckd_clean.csv")
#mydata1 <- merge(mydata1,mydata2,by=c('age','bp','sg','al','su','rbc','pc','pcc','ba','bgr','bu','sc','sod','pot','hemo','pcv','wc','rc','htn','dm','cad','appet','pe','ane','classification'))
#summary stats for all variables in dataset
summary(mydata1)
temp<- mydata1
test<- mydata1$bp
test
#is.na() will check whether a particular valu is NA OR NOT returns vector of Boolean Value
is.na(test)
#to identify the indices having NA Values we can use which() function
which(is.na(test))
#replacing the NA values with mean value
test[which(is.na(test))]<- 76.47
test
#which(is.na(test))
#we are finding all the index in bp column which contains na values and replacing them with the mean
temp$bp[which(is.na(temp$bp))]<- mean(temp$bp,na.rm = TRUE) #na.rm will actually remove the NA if it encounters it while estimating mean
temp
temp$sg[which(is.na(temp$sg))]<- mean(temp$sg,na.rm = TRUE)
temp$al[which(is.na(temp$al))]<- mean(temp$al,na.rm = TRUE)
temp$bgr[which(is.na(temp$bgr))]<- mean(temp$bgr,na.rm = TRUE)
temp$bu[which(is.na(temp$bu))]<- mean(temp$bu,na.rm = TRUE)
temp$age[which(is.na(temp$age))]<- mean(temp$age,na.rm = TRUE)
temp$pe[which(is.na(temp$pe))]<- 1
#confusion matrix
table(temp$classification)
mymodel=glm(classification~bgr+bu+ane+pe+dm+cad,family = binomial(link = "logit"),data=temp)
pymodel=predict(mymodel,temp)
#confusion matrix
tab=table(pmymodel>0.5,temp$classification)
tab
del,temp)
#confusion matrix
tab=table(pmymodel>0.5,temp$classification)
table(temp$classification)
mymodel=glm(classification~bgr+bu+ane+pe+dm+cad,family = binomial(link = "logit"),data=temp)
pymodel=predict(mymodel,temp)
#confusion matrix
tab=table(pymodel>0.5,temp$classification)
tab
accuracy=sum(diag(tab))/sum(tab)*100
accuracy
table(temp$classification)
ct=(150)/(150+250)*100
ct
